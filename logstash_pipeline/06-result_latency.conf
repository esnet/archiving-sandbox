# Format throughput results to just contain summary information

filter {
    if [test][type] == "latency" or [test][type] == "latencybg"{
        mutate {
            rename => {
                "[result][max-clock-error]" => "[@metadata][result][max_clock_error]"
                "[result][packets-duplicated]" => "[@metadata][result][packets][duplicated]"
                "[result][packets-lost]" => "[@metadata][result][packets][lost]"
                "[result][packets-received]" => "[@metadata][result][packets][received]"
                "[result][packets-reordered]" => "[@metadata][result][packets][reordered]"
                "[result][packets-sent]" => "[@metadata][result][packets][sent]"
            }
        }
        
        #calculate packet loss
        ruby {
            code => "
                sent = event.get('[@metadata][result][packets][sent]')
                lost = event.get('[@metadata][result][packets][lost]')
                if lost and sent and sent > 0 then
                    event.set('[@metadata][result][packets][loss]', lost.to_f/sent.to_f)
                end
            "
        }

        ruby {
            path => "/usr/share/logstash/pipeline/ruby/pscheduler_histogram.rb"
            script_params => {
                "source" => "[result][histogram-latency]"
                "target" => "[@metadata][result][latency]"
                #you can also configure quantiles
            }
        }
        
        ruby {
            path => "/usr/share/logstash/pipeline/ruby/pscheduler_histogram.rb"
            script_params => {
                "source" => "[result][histogram-ttl]"
                "target" => "[@metadata][result][ttl]"
            }
        }
        
        mutate {
            remove_field => ["result"]
        }
        
        mutate {
            rename => { 
                "[@metadata][result]" => "result"
            }
        }
    }
}