# Do some common tasks common to all tasks:
#   1. Remove the schedule object so we can replace with [task][schedule]
#   2. Build the pscheduler object
#   3. Remove run, task and tool
#   4. Generate a checksum used to identify same test with ruby script
#           NOTE: fingerprint filter can't handle nested objects

filter {
    mutate {
        remove_field => [ "schedule" ]
    }
    
    mutate {
        rename => {
            "[task][schedule]" => "[schedule]"
            "[run][added]" => "[pscheduler][added]"
            "[run][start-time]" => "[pscheduler][start_time]"
            "[run][end-time]" => "[pscheduler][end_time]"
            "[participants]" => "[pscheduler][participants]"
            "[tool][name]" => "[pscheduler][tool]"
            "[task][detail][duration]" => "[pscheduler][duration]"
            "[task][href]" => "[pscheduler][task_href]"
            "[run][href]" => "[pscheduler][run_href]"
        }
        remove_field => ["run", "task", "tool"]
    }
    
    dissect {
        mapping => {
            "[pscheduler][task_href]" => "%{?url}/tasks/%{[pscheduler][task_id]}"
            "[pscheduler][run_href]" => "%{?url}/runs/%{[pscheduler][run_id]}"
        }
    }

    #if using HTTP connector, have the option to use custom header that gives better hint of observer
    mutate {
        rename => {
            "[headers][x_ps_observer]" => "[@metadata][ps_observer]"
        }
    }
    #remove HTTP header fields if present
    mutate {
        remove_field => ["headers"]
    }
    
    ruby {
        path => "/usr/share/logstash/pipeline/ruby/pscheduler_test_checksum.rb"
    }
}